{
  "hash": "62bd60998b862fba0b7ee8c3e57d3067",
  "result": {
    "markdown": "---\ntitle: \"A First Look at TimeGPT using nixtlar\"\nauthor: \"Joseph Rickert\"\ndate: 2025-02-17\ncode-fold: true\ncode-summary: \"Show the code\"\ndescription: \"TimeGPT is a pre-trained, multi-layer, encoder/decoder transformer model with self-attention mechansims designed specifically for time series forecasting. This post, a revision of the of the post first published on 2025-02-12, corrects an error that deleteriously affected the ARIMA and exponential smoothing forecasts which are contrasted with the TimeGPT forecast.\"\ncategories: \"\"\neditor: source\n---\n\n\nThis post is a first look at [Nixtla's](https://docs.nixtla.io/) `TimeGPT` generative, pre-trained transformer for time series forecasting using the `nixtlar` R package.\n\nAs described in [Garza et al. (2021)](https://arxiv.org/abs/2111.04052), TimeGPT is a Transformer-based time series model with self-attention mechanisms. The architecture comprises an encoder-decoder structure with multiple layers, each with residual connections and layer normalization. The encoder, a stack of multi-head self-attention layers followed by a feed-forward neural network, processes the input time series. The decoder, which is similar to the encoder, generates the forecast. The decoder includes an additional multi-head attention layer that takes the encoder’s output as input. The model is trained using a teacher-forcing strategy, where the decoder receives the ground-truth values during training. The model is then used for forecasting by feeding the model’s predictions back as input during inference.\n\n![](timegpt.png){fig-alt=\"TimeGPT architecture\"}\n\n\nNixtla's website provides a considerable amount of explanatory material, documentation, and code examples in Python. The [`nixtlar`](https://cran.r-project.org/package=nixtlar) package wraps the Python code to provide an R interface. The package documentation for version 0.6.2 doesn't fully the R functions, but the vignettes provide sufficient code examples to get started.\n\n*Before getting started with TimeGPT, you will have to register for an API key. The process is easy enough and is described in this [vignette](https://cran.r-project.org/web/packages/nixtlar/vignettes/setting-up-your-api-key.html).*\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nlibrary(tidyverse)\nlibrary(forecast)\nlibrary(xts)\nlibrary(prophet)\nlibrary(nixtlar)\n```\n:::\n\n\n\n\n## The Data\n\nThe electricity dataset included in the `nixtlar` package contains hourly observations of  electricity consumption generated sourced from the [PJM Interconnection LLC](https://www.pjm.com/), a regional transmission organization that is part of the Eastern Interconnection grid in the United States. There are five different time series with data taken from 2012 to 2018. \n\nNote that the electricity data is in \"long\" format and that `ds` the time variable is character data.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ndf <- nixtlar::electricity\nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 8,400\nColumns: 3\n$ unique_id <chr> \"BE\", \"BE\", \"BE\", \"BE\", \"BE\", \"BE\", \"BE\", \"BE\", \"BE\", \"BE\", …\n$ ds        <chr> \"2016-10-22 00:00:00\", \"2016-10-22 01:00:00\", \"2016-10-22 02…\n$ y         <dbl> 70.00, 37.10, 37.10, 44.75, 37.10, 35.61, 34.55, 50.49, 61.5…\n```\n:::\n:::\n\n\nA look at the \"wide\" data frame shows that the various series do not cover the same time periods.\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ndf_wide <- df |>\n  pivot_wider(names_from = unique_id, values_from = y)\n\nhead(df_wide)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n  ds                     BE    DE    FR    NP   PJM\n  <chr>               <dbl> <dbl> <dbl> <dbl> <dbl>\n1 2016-10-22 00:00:00  70      NA  54.7    NA    NA\n2 2016-10-22 01:00:00  37.1    NA  51.2    NA    NA\n3 2016-10-22 02:00:00  37.1    NA  48.9    NA    NA\n4 2016-10-22 03:00:00  44.8    NA  45.9    NA    NA\n5 2016-10-22 04:00:00  37.1    NA  41.2    NA    NA\n6 2016-10-22 05:00:00  35.6    NA  41.4    NA    NA\n```\n:::\n:::\n\n\nPlots indicate that all of the series show periods of considerable volatility. The BE, DE, and FR series appear to be stationary. NP trends upward to the right, and the PJM series appears to be nonlinear.\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ndf2 <- df |> mutate(time = as.POSIXct(ds, format = \"%Y-%m-%d %H:%M:%S\")) |>\n  group_by(unique_id)\n\np <- df2 |> ggplot(aes(x = time, y = y, color = unique_id)) +\n  geom_line() + facet_wrap( ~ unique_id, scales = \"free\")\n\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n## TimeGPT Forecsts\n\nI'll begin by showing off the `nixtlar` forecasting function, which can handle multiple time series by forecasting eight hours ahead using all of the data. The parameter `h` specifies the number of steps ahead to forecast, and `level` specifies the confidence level for the forecast.\n\nHere is the built-in `nixtlar` plot function.\n\n::: {.cell}\n\n```{.r .cell-code}\n#nixtla_client_plot(df, nixtla_client_fcst, max_insample_length = 200)\n```\n:::\n\n\n\n![](fcst.png){fig-alt=\"\"}\n\nThis plot uses `ggplot2`to focus in on the forecasts of 8 points using all of the data. The level parameter indicates that both 80% and 96% confidence intervals should be computed.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# nixtla_client_fcst <- nixtla_client_forecast(df, h = 8, level = c(80,95))\n# saveRDS(nixtla_client_fcst, \"nixtla_client_fcst.rds\")\n\nnixtla_client_fcst <- readRDS(\"nixtla_client_fcst.rds\")\n\nncf_df <-  nixtla_client_fcst |> mutate(time = as.POSIXct(ds, format = \"%Y-%m-%d %H:%M:%S\")) |> group_by(unique_id)\n\nnames(ncf_df) <- c(\"unique_id\", \"ds\", \"TimeGPT\", \"lon\", \"loe\", \"hie\", \"hin\")\n\npf <- ncf_df |> ggplot(aes(x = ds, y = TimeGPT, color = unique_id)) +\n  geom_line() +\n  geom_ribbon(aes(ymin = lon, ymax = hin),\n              linetype = 2,\n              alpha = 0.1) +\n  facet_wrap( ~ unique_id, scales = \"free\")\n\npf\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\nFor the rest of this post, I'll work only with the BE data and do some simple back testing. I will split the data into a training set and a test set containing 24 hours worth of observations. Then, I'll fit established time series forecasting models and compare how well they do vis-a-vis the actual data and with each other. Note, I will not attempt any tuning of these models in an attempt to make it a fair, \"out-of-the-box\" comparison.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nNF <- 24\n\nBE_df_wide <- df |> pivot_wider(names_from = unique_id, values_from = y) |>\n  select(ds, BE) |> drop_na()\n\nBE_train_df <- BE_df_wide %>% filter(row_number() <= n() - NF)\nBE_test_df <- tail(BE_df_wide, NF)\nBE_train_df <- BE_train_df |> rename(y = BE) |> mutate(unique_id = \"BE\")\nBE_test_df <- BE_test_df |> rename(y = BE)\n```\n:::\n\n\n\nThe `nixtla_client_forecast()` function is the main `nixtlar` forecasting function. (I have already run this function and saved the results RDS file in order not to make an API call every time the code is run during the blog building process.) \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n#nixtla_fcst <- nixtla_client_forecast(BE_train_df, h = NF, level = 95)\n#saveRDS(nixtla_fcst, \"nixtla_fcst_24.rds\")\nnixtla_fcst <- readRDS(\"nixtla_fcst_24.rds\")\nnames(nixtla_fcst) <- c(\"unique_id\", \"ds\", \"TimeGPT\", \"lo95\", \"up95\")\n```\n:::\n\n\nHere, I create a data frame to hold the actual and forecast values.\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nfcst_df <- tail(nixtla_fcst, NF) |> select(ds, TimeGPT) |>\n  rename(time = ds, tgpt_fcst = TimeGPT) |>\n  mutate(elec_actual = BE_test_df$y)\n\nhead(fcst_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 time tgpt_fcst elec_actual\n1 2016-12-30 00:00:00  38.82010       44.30\n2 2016-12-30 01:00:00  36.29234       44.30\n3 2016-12-30 02:00:00  34.97838       41.26\n4 2016-12-30 03:00:00  32.99565       40.62\n5 2016-12-30 04:00:00  31.58322       40.07\n6 2016-12-30 05:00:00  33.27422       41.02\n```\n:::\n:::\n\n\n## Some Comparative Forecasts\n\nThis next section of code reformat the training data into a format that is suitable for the `auto.arima()` and `auto.ets()` functions. Both of these functions require that the data be expressed as a `ts()` object. The original version of this post formatted the data as an `xts()` object: an error that substantially impacted the ARIMA and exponential smoothing forecasts. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nauto_train <- BE_train_df |> select(-unique_id) |>\n  mutate(time = as.POSIXct(ds, format = \"%Y-%m-%d %H:%M:%S\")) |> select(-ds)\n\nelec_ts <- ts(auto_train$y, start = c(2016, 10, 22, 0), frequency = 24)\n```\n:::\n\n\n### ARIMA Forecast with `auto.arima()`\n\nThe `auto.arima()` function from the `forecast` package fits a fairly sophisticated ARIMA(2,1,1)(1.0.1)[24] model. The parameters in parentheses means two autoregressive terms, one difference, one moving average term, one seasonal autoregressive term, no seasonal differencing, and one seasonal moving average term. [24] indicates that the seasonal pattern repeats every 24 observations. (Note that because the ARIMA forecast takes several seconds to run, I am reading form a an rds file to expedite the blog process.)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n#arima_fcst <- elec_ts |>\n#  auto.arima() |>\n#  forecast(h = NF , level = 95)\n#saveRDS(arima_fcst, \"arima_fcst_24.rds\")\narima_fcst <- readRDS(\"arima_fcst_24.rds\")\n```\n:::\n\n\n\n\n### Exponential Smoothing Forecast with `ets()`\n\nBecause I have provided no guidance, the `ets()` function from the `forecast` package fits an ETS(M,N,M) model. This is a multiplicative model without a trend component, where both the error and the seasonal components are multiplicative. The first M indicates that the error term (random fluctuation) is modeled as a multiplicative component where the error term's effect on the forecasted value is proportional to the level of the time series.\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nets_fcst <- elec_ts |>\n  ets() |>\n  # number of periods to forecast\n  forecast(h = NF)\n```\n:::\n\n\n\n### Prophet Forecast\n\nI also ask the `prophet()` function from the `prophet` package for an automatic fit using the default parameters. Among other things, this means a linear growth curve with additive seasonality and automatic estimates for daily seasonality. As for the TimeGPT forecast, the model is fit using`BE_train_df` data frame in which the time variable is character data. The `make_future_dataframe()` function creates a data frame with the same structure as `BE_train_df` but with the `ds` column extended by `NF` periods.\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nprophet_fit <- prophet(BE_train_df)\n\nfuture <- make_future_dataframe(\n  prophet_fit,\n  periods = NF,\n  freq = 3600,\n  include_history = FALSE\n)\n\nprophet_fcst <- predict(prophet_fit, future)\n```\n:::\n\n\n\n\n## Results and Discussion\n\nBefore plotting, let's have a look at the wide data frame that holds the forecasts.\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nfcst_df2 <- fcst_df |>\n  mutate(\n    arima_fcst = as.vector(arima_fcst$mean),\n    ets_fcst = as.vector(ets_fcst$mean),\n    prophet_fcst = prophet_fcst$yhat\n  )\n\nhead(fcst_df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 time tgpt_fcst elec_actual arima_fcst ets_fcst prophet_fcst\n1 2016-12-30 00:00:00  38.82010       44.30   46.19057 37.72396     32.05748\n2 2016-12-30 01:00:00  36.29234       44.30   44.99377 34.97583     29.74375\n3 2016-12-30 02:00:00  34.97838       41.26   44.06233 32.89185     22.66588\n4 2016-12-30 03:00:00  32.99565       40.62   42.45347 29.87591     15.85864\n5 2016-12-30 04:00:00  31.58322       40.07   43.05403 27.56602     15.62841\n6 2016-12-30 05:00:00  33.27422       41.02   44.28001 29.15387     23.54824\n```\n:::\n:::\n\n\nThen, shape the data into long format and plot.\n\n::: {.cell .preview-image}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nfcst_dft2_long <- fcst_df2 %>%\n  pivot_longer(!time, names_to = \"method\", values_to = \"mean\")\n\nq <- fcst_dft2_long |>\n  ggplot(aes(\n    x = time,\n    y = mean,\n    group = method,\n    color = method\n  )) +\n  geom_line() +\n  geom_point() +\n  ggtitle(\"TimeGPT vs ARIMA vs ETS vs Prophet vs actual data - 24 Point Forecast\")\n\nq\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nThe TimeGPT forecast looks quite good. I don't think this is a big surprise, given that the Nixtla folks chose the electricity data set to show off their transformer. However, it is curious, that except for one point, the TimeGPT forecast is lower than the actual data. It is also interesting that some of the forecasted points that are farther out are a better match to the actual data than the initial forecast points.\n\nThe ARIMA forecast is quite good. It tracks the first few points very closely,  undershoots the peaks of the actual data, but recovers after both peaks and tracks the data well towards the end of the forecast period. \n\nThe exponential smoothing forecast mostly stays well below the actual data, but also dose pretty well overall. \n\nThe \"no thought\" prophet model overacts to the downward trends at the beginning and end of the forecast period. My guess is that with a little tuning prophet could do much better. \n\nIt is also worth noting that choosing the *best* forecast also depends on your objectives. For example, in some circumstances, one might prefer  a forecast that reproduces seasonal patterns or rather than overall accuracy. For this exercise, we see that TimeGPT mimics the volatility of the actual data but that the ARIMA forecast has the lowest rood mean squared error. Also note that the ARIMA and exponential smoothing forecasts are not quite *black-box* forecasts. Converting the data into `ts()` time series objects entails explicitly providing seasonality information. TimeGPT apparently inferred this information from character data.\n \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nRMSE <-  function(m, o){sqrt(mean((m - o)^2))}\nrms_names <- c(\"tgpt\", \"arima\", \"ets\", \"prophet\")\nrms_fcst <- array(NA_real_,\n                          dim = 4,\n                          dimnames = list(rms_names))\nrms_fcst[1] <- RMSE(fcst_df2$tgpt_fcst, fcst_df2$elec_actual)\nrms_fcst[2] <- RMSE(fcst_df2$arima_fcst, fcst_df2$elec_actual)\nrms_fcst[3] <- RMSE(fcst_df2$ets_fcst, fcst_df2$elec_actual)\nrms_fcst[4] <- RMSE(fcst_df2$prophet_fcst, fcst_df2$elec_actual)\nrms_fcst\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     tgpt     arima       ets   prophet \n 6.601752  4.966623  9.355767 14.948709 \n```\n:::\n:::\n\n\n## Some Final Thoughts\n\n\nIt is clear that the TimeGPT model has upped the game for black-box time series forecasting. It is sure to become a powerful tool for doing exploratory work with large time series and comparing and contrasting multiple time series and may become the \"go-to\" baseline forecasting tool for a wide range of time series. Moreover, I expect that time series experts who can fine-tune prophet and more traditional time series models will be able to develop some intuition about what TimeGPT is doing by assessing its behavior in relation to these models. \n\nI am aware that this little post may have raised more questions than it answered. If so, please try your hand at elaborating on some of the issues raised. We would be very happy to consider your time series posts for publication on R Works.\n\nFinally, for a more sophisticated analysis of these series that deals with their multiseasonality aspects, see the [Electricity Load Forecast Tutorial](https://nixtlaverse.nixtla.io/mlforecast/docs/tutorials/electricity_load_forecasting.html). And, for some ideas about how to harness \"ordinary\" LLMs for time series forecasting have a look at the second half of the talk that Bryan Lewis gave to [nyhackr](https://www.youtube.com/watch?v=3NM-nJxm-qY) in April 2024.\n\n\n## Acknowledgment\nMany thanks to Professor Rob Hyndman for flagging the ARIMA time series object error described above. Any errors still remaining in this post are all mine.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}