{
  "hash": "b3490737ac1f6134f222f799e3866ce0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"A Simple Bayesian Multi-state Survival Model for a Clinical Trial\"\nauthor: \"Joseph Rickert\"\ndate: 2025-06-25\ncode-fold: true\ncode-summary: \"Show the code\"\nimage: states.png\ndescription: \"This post shows how to use the elementary theory of discrete time Markov Chains to construct a multi-state model of patients progressing through various health states in a randomized clinical trial comparing different treatments for asthma management under the assumption that all patients in each of the two arms of the trial will eventually experience treatment failure. The post shows how to calculate transition probabilities using a simple multinomial Bayesian model and exploit the theory of absorbing Markov chains to calculate fundamental health metrics.\"\ncategories: \"\"\neditor: source\n---\n\nThis post shows how to use the elementary theory of discrete time Markov Chains to construct a multi-state model of patients progressing through various health states in a randomized clinical trial comparing different treatments for asthma management under the assumption that all patients in each of the two arms of the trial will eventually experience treatment failure. The post shows how to calculate transition probabilities using a simple multinomial Bayesian model and exploit the theory of absorbing Markov chains to calculate fundamental health metrics, including the expected time spent in each health state, survival curves, and the expected time to treatment failure for each of the two treatments. These estimates provide a natural way to compare the effectiveness of the two treatments and can be used to drive cost-effectiveness comparisons.\n\nAlthough the theory is basic and the calculations are simple, variations of this model should be applicable to a wide range of problems in health economics and decision analysis. \n\n\n## Required Packages and Helper Functions\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"R packages\"}\nlibrary('dplyr')\nlibrary('ggplot2')\nlibrary('stringr')\nlibrary('tidyverse')\nlibrary('matrixcalc')\nlibrary('LaplacesDemon') # for Dirichlet distribution\nlibrary('diagram')\n```\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Helper Functions\"}\n# names for transition probabilities\ntrans_names <- function(x) {\n  transitions <- paste(x, \"-\", 1:5, sep = \"\")\n  return(transitions)\n}\n\n\nsim_res <- function(matrix, from_state, n_sims = 20000) {\n  # Bayesian simulation using Dirichlet conjugate prior\n  # matrix is the matrix of observed states\n  # from_state is the row index of the initial state\n  # n_sims is the number of simulations to run\n  priors <- matrix(rep(1, 20), nrow = 4) # Prior parameters for Dirichlet dist HERE\n  dist <- matrix[from_state, ] + priors[from_state, ]\n  res <- rdirichlet(n_sims, dist)\n  colnames(res) <- paste(from_state, \"-\", 1:5, sep = \"\")\n  return(res)\n}\n\nsmry <- function(res_matrix) {\n  apply(res_matrix, 2, function(x) {\n    c(\n      mean = mean(x),\n      lower = quantile(x, probs = 0.025),\n      upper = quantile(x, probs = 0.975)\n    )\n  })\n}\n\nplot_row_dist <- function(matrix, treatment, start_state) {\n  # code to plot the posterior marginal distributions\n  # Inputs:\n  # matrix the simulation matrix for the health state of interest\n  # treatment: either Seretide or Fluticasone as a character\n  # start_state: name of health state that agrees with matrix as a character\n  treatment <- treatment\n  start_state <- start_state\n  plot_df <- matrix %>%\n    as.data.frame() %>%\n    pivot_longer(cols = everything(), names_to = \"transitions\", values_to = \"prob\")\n\n  ggplot(plot_df, aes(x = prob)) +\n    geom_histogram(aes(y = after_stat(density)), bins = 15, fill = \"lightgrey\", color = \"black\") + # histogram for each category\n    geom_density(aes(y = after_stat(density)), color = \"red\", linewidth = 0.5) + # density line\n    scale_x_continuous(breaks = scales::pretty_breaks(n = 5)) +\n    xlab(\"probability\") +\n    facet_wrap(~transitions, scales = \"free\") + # faceting for each category\n    labs(x = \"Probability\", y = \" \") +\n    ggtitle(paste(treatment, \": Posterior State Transition Probabilities for states starting in\", start_state))\n}\n\n\n# Function to compute the probability of being in each state at time t\nprob_at_time <- function(matrix, time, i_state) {\n  u <- i_state\n  index_eq_1 <- which(u == 1)\n  m <- matrix.power(matrix, time)\n  u_t <- u %*% m # Distribution at time t\n  rownames(u_t) <- names(states)[index_eq_1]\n  round(u_t, 2)\n}\n\n\ntime_in_state2 <- function(tpm, n) {\n  # Function to compute the expected time spent in each state\n  # tpm - the transition probability matrix\n  # n - the number of time periods\n  I <- diag(5) # Initial state vectors\n  s_time <- matrix(0, nrow = 5, ncol = 5)\n  m <- matrix(0, nrow = 5, ncol = 5)\n  for (i in 1:5) {\n    for (j in 1:n) {\n      m[i, ] <- I[i, ] %*% matrix.power(tpm, j)\n      s_time[i, ] <- s_time[i, ] + m[i, ]\n      colnames(s_time) <- c(\"STW\", \"UTW\", \"Hex\", \"Pex\", \"TF\")\n      rownames(s_time) <- c(\"STW\", \"UTW\", \"Hex\", \"Pex\", \"TF\")\n    }\n  }\n  return(s_time)\n}\n```\n:::\n\n\n## The Data\n\nThe data used in this post originates from a four arm randomized trial comparing treatments for asthma management, including Seretide and Fluticasone, conducted by Kavuru et al. [3]. I report the data presented in the text by Welton et al. [5] and the paper by Briggs et al. [2]. The data comprise the number of patients in each of five health states at the end of each week for a 12-week follow-up period. The states are defined as follows: `STW`= successfully treated week, `UTW`= unsuccessfully treated week, `Hex`= hospital-managed exacerbation ,`Pex`= primary care-managed exacerbation, and `TF`= treatment failure.\n\nState tables such as these are a common way to summarize the results of a clinical study.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Load the Data\"}\nstates <- c(\n  \"STW\" = \"sucessfully treated week\",\n  \"UTW\" = \"unsucessfully treated week\",\n  \"Hex\" = \"hospital-managed exacerbation\",\n  \"Pex\" = \"primary care-managed exacerbation\",\n  \"TF\" = \"treatment failure\"\n)\n\ntreatments <- c(\"Seretide\", \"Fluticasone\")\n\ns_state <- matrix(\n  c(\n    210, 60, 0, 1, 1,\n    88, 641, 0, 4, 13,\n    0, 0, 0, 0, 0,\n    1, 0, 0, 0, 1,\n    0, 0, 0, 0, 81\n  ),\n  nrow = 5, byrow = TRUE,\n  dimnames = list(names(states), names(states))\n)\n\nf_state <- matrix(\n  c(\n    66, 32, 0, 0, 2,\n    42, 752, 0, 5, 20,\n    0, 0, 0, 0, 0,\n    0, 4, 0, 1, 0,\n    0, 0, 0, 0, 156\n  ),\n  nrow = 5, byrow = TRUE,\n  dimnames = list(names(states), names(states))\n)\n```\n:::\n\n\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Observed States for Seretide\"}\ns_state\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    STW UTW Hex Pex TF\nSTW 210  60   0   1  1\nUTW  88 641   0   4 13\nHex   0   0   0   0  0\nPex   1   0   0   0  1\nTF    0   0   0   0 81\n```\n\n\n:::\n:::\n\n:::\n\n\n::: {.column width=\"10%\"}\n\n:::\n\n::: {.column width=\"45%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Obsereved States for Fluticasone\"}\nf_state\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    STW UTW Hex Pex  TF\nSTW  66  32   0   0   2\nUTW  42 752   0   5  20\nHex   0   0   0   0   0\nPex   0   4   0   1   0\nTF    0   0   0   0 156\n```\n\n\n:::\n:::\n\n:::\n\n::::\n\n## The Markov Model\n\nThe state diagram, which shows directed arcs between the states, is a useful way to visualize the Markov model. The arcs represent the possible transitions between states, and the numbers on the arcs represent the **from-to** state transitions. Since there are no arcs emanating from `TF` it is clear that this state is being modeled as an absorbing state, similar to death in a survival model.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## The Bayesian Model\n\nThe Bayesian is a simple [conjugate prior model](https://en.wikipedia.org/wiki/Conjugate_prior) with a Multinomial likelihood function and Dirichlet prior distribution. Because these two distributions are conjugate, the posterior distribution will also be a Dirichlet. \n\n### The Dirichlet Distribution\n\nThe [Dirichlet distribution](https://en.wikipedia.org/wiki/Dirichlet_distribution) is a multivariate generalization of the beta distribution, which is parameterized by a vector of positive real numbers and is defined over a simplex a generalization of the concept of a triangle to higher dimensions. The probability density function (PDF) of the Dirichlet distribution is given by:\n\n$$ p(x) = \\dfrac{\\Gamma(\\alpha_0)}{\\Gamma(\\alpha_1)...\\Gamma(\\alpha_n)} \\prod_{i = 1}^{n}x_i^{\\alpha_i - 1}I(x \\in S)$$ \n\nwhere $\\alpha_0 = \\sum_{i=1}^{n} \\alpha_i$, $I(x)$ is the indicator function, $\\Gamma$ is the gamma function, and the simplex $S = x \\in \\mathbb{R}^n: x_i > 0, \\sum_{i=1}^{n} x_i = 1$ is the space of probability distributions. You can think of the Dirichlet distribution as a distribution of probability distributions. It models proportions or probabilities that sum to one, such as the transition probabilities in a Markov chain, and is often used as a prior distribution in Bayesian models since it is conjugate with the Multinomial distribution. (See Tufts in the references below.). The parameters of the Dirichlet posterior distribution are the vector sum of the prior parameters and the observed counts. When the $\\alpha_i$ parameters are all equal, the Dirichlet distribution is symmetric and uniform over the simplex. When the parameters are unequal, the distribution is skewed towards the larger parameters. In the code below, the $\\alpha_i$ parameters are set to 1.\n\n### Seretide Simulations\n\nThis section of code uses the `sim_res` function to simulate the posterior distribution of the transition probabilities for Seretide, starting in each of the four transient states. The results are summarized using the `smry` function, which computes the mean and 95% credible intervals for each transition probability.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ns_STW_sim <- sim_res(matrix = s_state, from_state = 1)\ns_STW_smry <- smry(s_STW_sim)\n\ns_UTW_sim <- sim_res(matrix = s_state, from_state = 2)\ns_UTW_smry <- smry(s_UTW_sim)\n\ns_Hex_sim <- sim_res(matrix = s_state, from_state = 3)\ns_Hex_smry <- smry(s_Hex_sim)\n\ns_Pex_sim <- sim_res(matrix = s_state, from_state = 4)\ns_Pex_smry <- smry(s_Pex_sim)\n```\n:::\n\n\n\nThis code plots the marginal posterior distributions of the transition probabilities for Seretide starting in health state, `STW`. Note that the marginal distributions of a Dirichlet distribution are Beta distributions. The plot supports this theoretical result.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nplot_row_dist(matrix = s_STW_sim, treatment = \"Seretide\", start_state = \"STW\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n### Fluticasone Simulations\n\nThis section of code uses the `sim_res` function to simulate the posterior distribution of the transition probabilities for Fluticasone, starting in each of the four transient states. The results are summarized using the `smry` function, which computes the mean and 95% credible intervals for each transition probability.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nf_STW_sim <- sim_res(matrix = f_state, from_state = 1)\nf_STW_smry <- smry(f_STW_sim)\n\nf_UTW_sim <- sim_res(matrix = f_state, from_state = 2)\nf_UTW_smry <- smry(f_UTW_sim)\n\nf_Hex_sim <- sim_res(matrix = s_state, from_state = 3)\nf_Hex_smry <- smry(f_Hex_sim)\n\nf_Pex_sim <- sim_res(matrix = s_state, from_state = 4)\nf_Pex_smry <- smry(f_Pex_sim)\n```\n:::\n\n\nThis code plots the marginal posterior distributions of the transition probabilities for Fluticasone starting in STW.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# code for histogram of rd_df data frame\nplot_row_dist(matrix = f_STW_sim, treatment = \"Fluticasone\", start_state = \"STW\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Theoretical Results\n\nIn this section, we present some theoretical results for discrete time absorbing Markov chains that are applicable to analyzing the asthma treatment data. The first step is to recover the mean transition probabilities from the posterior distributions computed above. Using these, we construct the **Fundamental Matrix** for the absorbing Markov chains associate with each treatment group.\n\n### Transition Probabilities\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Seretide transition Probabilities\ns_TP <- rbind(\n  s_STW_smry[1, ],\n  s_UTW_smry[1, ],\n  s_Hex_smry[1, ],\n  s_Pex_smry[1, ]\n)\n\ns_TP <- rbind(s_TP, c(0, 0, 0, 0, 1)) # Add the absorbing state TF\ncolnames(s_TP) <- c(\"STW\", \"UTW\", \"Hex\", \"Pex\", \"TF\")\nrownames(s_TP) <- c(\"STW\", \"UTW\", \"Hex\", \"Pex\", \"TF\")\n# s_TP\n\n# Fluticasone transition Probabilities\nf_TP <- rbind(\n  f_STW_smry[1, ],\n  f_UTW_smry[1, ],\n  f_Hex_smry[1, ],\n  f_Pex_smry[1, ]\n)\nf_TP <- rbind(f_TP, c(0, 0, 0, 0, 1)) # Add the absorbing state TF\ncolnames(f_TP) <- c(\"STW\", \"UTW\", \"Hex\", \"Pex\", \"TF\")\nrownames(f_TP) <- c(\"STW\", \"UTW\", \"Hex\", \"Pex\", \"TF\")\n```\n:::\n\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Seretide Transition Probability Matrix\"}\nround(s_TP, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     STW  UTW  Hex  Pex   TF\nSTW 0.76 0.22 0.00 0.01 0.01\nUTW 0.12 0.85 0.00 0.01 0.02\nHex 0.20 0.20 0.20 0.20 0.20\nPex 0.29 0.14 0.14 0.14 0.29\nTF  0.00 0.00 0.00 0.00 1.00\n```\n\n\n:::\n:::\n\n:::\n\n\n::: {.column width=\"10%\"}\n\n:::\n\n::: {.column width=\"45%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Fluticasone Transition Probability Matrix\"}\nround(f_TP, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     STW  UTW  Hex  Pex   TF\nSTW 0.64 0.31 0.01 0.01 0.03\nUTW 0.05 0.91 0.00 0.01 0.03\nHex 0.20 0.20 0.20 0.20 0.20\nPex 0.29 0.14 0.14 0.14 0.29\nTF  0.00 0.00 0.00 0.00 1.00\n```\n\n\n:::\n:::\n\n:::\n\n::::\n\n### Fundamental Matrix\n\nFor an absorbing Markov Chain, each entry $n_{ij}$ of the fundamental matrix, $N$, gives the expected number of times the process is in state $s_j$ given that it starts in state $s-i$.  For our example, this corresponds to the number of weeks that a patient is expected to spend in each of the transient states before reaching the absorbing state, *TF*. \n\nThe first step in getting to $N$ is to partition the transition matrix into sub-matrices of $Q$ of transient state transition probabilities, and  $R$, absorbing state transition probabilities as illustrated in the figure below. If there are $q$ transitive states and $r$ absorbing state, $Q$ is a $q \\times q$ matrix, $R$ is a $q \\times r$ matrix, $0$ is a $r \\times q$ matrix, and $I$ is a $r \\times r$ identity matrix. The figure is reproduced from Professor Nickolay Atanasov's *Chapter 11* notes on Markov chains [1] which presents lucid account of the theory presented here.\n\n\n\n \n![](N.png)\n\n\n\n#### Extract the Q matrix\n\nThis code partitions the transition probability matrix as described above. Note that we only have one absorbing state.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nQ_s <- s_TP[1:4, 1:4] # Extract the sub-matrix of transition probabilities for non-absorbing states\n\nrownames(Q_s) <- names(states)[1:4]\ncolnames(Q_s) <- names(states)[1:4] # Set the row and column names to the state names\n# round(Q_s,3)\n\nQ_f <- f_TP[1:4, 1:4] # Extract the sub-matrix of transition probabilities for non-absorbing states\n\nrownames(Q_f) <- names(states)[1:4]\ncolnames(Q_f) <- names(states)[1:4] # Set the row and column names to the state names\n# round(Q_f,3)\n```\n:::\n\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Seretide Q Matrix\"}\nround(Q_s, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     STW  UTW  Hex  Pex\nSTW 0.76 0.22 0.00 0.01\nUTW 0.12 0.85 0.00 0.01\nHex 0.20 0.20 0.20 0.20\nPex 0.29 0.14 0.14 0.14\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"10%\"}\n\n:::\n\n::: {.column width=\"45%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Fluticasone Q Matrix\"}\nround(Q_f, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     STW  UTW  Hex  Pex\nSTW 0.64 0.31 0.01 0.01\nUTW 0.05 0.91 0.00 0.01\nHex 0.20 0.20 0.20 0.20\nPex 0.29 0.14 0.14 0.14\n```\n\n\n:::\n:::\n\n\n:::\n\n::::\n\n#### Calculate the Fundamental Matrix, N. \n\nCalculating $N = (I - Q)^{-1}$ involves computing the inverse of the matrix $I - Q$ which is easy enough to do in `R`. Remember each entry $n_ij$ of N gives the expected number of times that an absorbing process is expected to be in the transient state $s_j$ before absorption, given that it starts in state $s_i$. So, given that patients start in health state `STW`, the expected number of weeks that patients are expected to spend in the various states before treatment failure are given by the first rows of $N_s$ and $N_f$ respectively. \n\n.\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nI <- diag(4) # Identity matrix of size 4\nN_s <- solve(I - Q_s) # Fundamental matrix for Seretide\n# round(N_s,3)\n\nN_f <- solve(I - Q_f) # Fundamental matrix for Fluticasone\n# round(N_f,3)\n```\n:::\n\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Seretide Fundamental Matrix\"}\nround(N_s, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      STW   UTW  Hex  Pex\nSTW 22.16 34.49 0.25 0.51\nUTW 18.79 36.23 0.23 0.50\nHex 13.40 22.97 1.46 0.63\nPex 12.74 21.34 0.37 1.53\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"10%\"}\n\n:::\n\n::: {.column width=\"45%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Fluticasone Fundamental Matrix\"}\nround(N_f, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     STW   UTW  Hex  Pex\nSTW 6.90 26.18 0.18 0.34\nUTW 4.54 29.10 0.16 0.34\nHex 3.78 17.95 1.42 0.52\nPex 3.69 16.58 0.32 1.42\n```\n\n\n:::\n:::\n\n\n:::\n\n::::\n\n\n### Expected time to Absorption\n\nThe expected time to absorption from each transient state is the sum of the expected number of times the process visits each transient state before absorption occurs. It is given by the formula $t = Nc$, where $c$ is a vector of ones. This is a useful measure for any healthcare economics study as the monetary costs and [QALYS](https://en.wikipedia.org/wiki/Quality-adjusted_life_year) assigned to each state determine the cost-effectiveness of a treatment.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Calculation for Seretide\nc <- c(1,1,1,1)\nE_s <- N_s %*% c # Expected time to absorption for Seretide\ncolnames(E_s) <- \"Seretide\"\n\n#Calculation for Fluticasone\nE_f <- N_f %*% c # Expected time to absorption for Fluticasone\ncolnames(E_f) <- \"Fluticasone\"\n\n# Combine the expected times to absorption for both treatments\nE <- cbind(E_s, E_f) %>% data.frame()\nround(E,2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Seretide Fluticasone\nSTW    57.40       33.61\nUTW    55.75       34.14\nHex    38.47       23.67\nPex    35.97       22.01\n```\n\n\n:::\n:::\n\n\n### Distribution at time t\n\nProbability of being in each state at time t starting from state STW as given by $P(s = i | time = t) = uP^t$ where $u$ is the initial state vector, and $P$ is the transition probability matrix. To provide a specific example, the following code calculates the probability of patients being in the health state `STW` at week 13, the week after the follow up period of the study, given that they started in `STW`.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Seretide\nt <- 13\nu <- c(1, 0, 0, 0, 0) # Initial state vector, starting in STW\nspt <- prob_at_time(s_TP, t, u)\n\n# Fluticasone\nt <- 12\nu <- c(1, 0, 0, 0, 0) # Initial state vector, starting in STW\nfpt <- prob_at_time(f_TP, t, u)\n\n\np_in_state <- rbind(spt, fpt)\nrownames(p_in_state) <- c(\"Seretide start STW\", \"Fluticasone start STW\")\np_in_state\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                       STW  UTW Hex  Pex   TF\nSeretide start STW    0.29 0.51   0 0.01 0.19\nFluticasone start STW 0.10 0.58   0 0.01 0.31\n```\n\n\n:::\n:::\n\n\n### Plot Survival Curves\n\nFrom here, it is trivial to compute the probability that patients will not be in the absorption state as time progresses and plot a standard survival curve.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nN <- 156 # weeks\ns_surv_dat <- vector(\"numeric\", length = N)\nf_surv_dat <- vector(\"numeric\", length = N)\n\nu <- c(1, 0, 0, 0, 0) # Initial state vector, starting in STW\nfor (t in 1:N) {\n  s_dist <- prob_at_time(s_TP, t, u)\n  s_surv_dat[t] <- sum(s_dist[1:4]) # Sum of probabilities of being in transient states)\n  f_dist <- prob_at_time(f_TP, t, u)\n  f_surv_dat[t] <- sum(f_dist[1:4]) # Sum of probabilities of being in transient states\n}\n\nsurvival_df <- data.frame(\n  time = 1:N,\n  s_prob = s_surv_dat,\n  f_prob = f_surv_dat\n)\n\nsurvival_df_l <- survival_df %>%\n  pivot_longer(\n    cols = c(s_prob, f_prob),\n    names_to = \"treatment\", values_to = \"probability\"\n  ) %>%\n  mutate(treatment = recode(treatment, s_prob = \"Seretide\", f_prob = \"Fluticasone\"))\n\nggplot(survival_df_l) +\n  geom_line(aes(\n    x = time, y = probability, group = treatment,\n    color = treatment\n  ), linewidth = 1.5) +\n  labs(\n    title = \"Probability of being in transient states over time\",\n    x = \"Time (weeks)\",\n    y = \"Probability\"\n  ) +\n  scale_x_continuous(breaks = seq(0, N, by = 5)) +\n  scale_y_continuous(labels = scales::percent_format(scale = 1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nThe curves clearly suggest that Seretide would be the preferred treatment.\n\n### Expected time spent in selected state\n\nThis section of code computes a matrix that provides the expected time the Markov chain will spend in each state up to some time n. Each row of the matrix assumes the process starts in the state designated by the row name. The entry for each column of that row is the expected time spent in that state up to time n. Matrices are computed for both Seretide and Fluticasone.\n\nHere we choose n = 26 weeks.\n\nNote that in a healthcare cost-effectiveness model, these times could be used to compute the financial and quality of life costs for patients who survive to n weeks.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nn <- 26\n\ns_state_times <- time_in_state2(tpm = s_TP, n = n)\nf_state_times <- time_in_state2(tpm = f_TP, n = n)\n```\n:::\n\n\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Seretide: State times at n = 26\"}\n# Seretide\nround(s_state_times, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     STW   UTW  Hex  Pex    TF\nSTW 8.61 12.16 0.09 0.19  4.95\nUTW 6.62 13.58 0.08 0.18  5.53\nHex 5.11  8.23 0.36 0.42 11.88\nPex 4.99  7.56 0.27 0.33 12.85\nTF  0.00  0.00 0.00 0.00 26.00\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"10%\"}\n\n:::\n\n::: {.column width=\"45%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Fluticasone: State times at n = 26\"}\n# Fluticasone\nround(f_state_times, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     STW   UTW  Hex  Pex    TF\nSTW 3.75 13.61 0.11 0.19  8.34\nUTW 2.36 15.31 0.08 0.18  8.07\nHex 2.30  9.29 0.37 0.42 13.64\nPex 2.32  8.53 0.27 0.33 14.56\nTF  0.00  0.00 0.00 0.00 26.00\n```\n\n\n:::\n:::\n\n\n:::\n\n\n\n::::\n\n\nHere, for both treatments, we compute the total time the chain spends in the transient states, assuming that the process starts in `STW`. These times agree nicely with the expected time to absorption computed above.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Seretide\ns_time_in_STW <- sum(s_state_times[1,1:4]) # Exclude the absorbing state TF\nf_time_in_STW <- sum(f_state_times[1,1:4]) # Exclude the absorbing state TF\ntime_in_STW <- data.frame(\n  Seretide = s_time_in_STW,\n  Fluticasone = f_time_in_STW\n)\nround(time_in_STW,2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Seretide Fluticasone\n1    21.05       17.66\n```\n\n\n:::\n:::\n\n\n## Conclusions\n\nI have constructed a very simple, Bayesian Markov Chain model to analyse the data for two arms of a clinical trial. This model should be relevant to any multi-state, time-to-event analysis where the data are given as state counts collected at regular intervals. In particular, the model should be helpful for analyzing disease progression data that meet these criteria. Coding the model with `R` from first principles is straight forward because `R` was designed for work with matrices, probability distributions, and Monte-Carlo simulations. \n\nI specifically do not want to claim that model presented here is an adequate final analysis for the asthma treatment data. This model is just the beginning of a serious analysis. However, it does demonstrate how straight forward it would be to conduct different kinds of sensitivity analyses or investigate the effects of non-informative priors. \n\n## References\n\n[1] Atanasov, N [Chapter 11: Markov Chains](https://natanaso.github.io/ece276b/ref/Grinstead-Snell-Ch11.pdf)\n\n[2] Briggs AH, Ades AE, Price MJ. [Probabilistic Sensitivity Analysis for Decision Trees with Multiple Branches: Use of the Dirichlet Distribution in a Bayesian Framework. Medical Decision Making](https://journals.sagepub.com/doi/abs/10.1177/0272989X03255922), 2003\n\n\n[3] Kavuru M, Melamed J, Gross G, Laforce C, House K, Prillaman B, Baitinger L, Woodring A, and  Shah T, (2000) [Salmeterol and fluticasone propionate combined in a new powder inhalation device for the treatment of asthma: a randomized, double-blind, placebo-controlled trial](https://pubmed.ncbi.nlm.nih.gov/10856143/)\n\n\n[4] Tufts, C. [The Little Book of LDA](https://miningthedetails.com/LDA_Inference_Book/index.html)\n\n[5] Welton NJ, Sutton AJ, Cooper NJ, Abrams KR, and Ades AE (2010) [Evidence Synthesis for Decision Making in Healthcare](https://www.cambridge.org/core/books/evidence-synthesis-for-decision-making-in-healthcare/3A2F7B1C4D5E6F8B9A1B0D2E3C4F5A6B). Cambridge University Press.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}