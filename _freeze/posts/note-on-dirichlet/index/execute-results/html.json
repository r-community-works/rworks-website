{
  "hash": "47a1192f1e5a92943826174d9596105f",
  "result": {
    "markdown": "---\ntitle: \"A Note on the Dirichlet Distribution\"\nauthor: \"Joseph Rickert\"\ndate: 2025-08-27\ndescription: \"T\"\nimage: \".png\"\nimage-alt: \"s\"\ncategories: \"\"\neditor: source\n---\n\n\n\nIn 1839, [Peter Gustav Lejeune Dirichlet](https://en.wikipedia.org/wiki/Peter_Gustav_Lejeune_Dirichlet) was a mathematician attached to the Philosophy department at the University of Berlin working for less than full pay even though he had become a member of the Prussian Academy of Sciences in 1832. Apparently, he wasn't fluent enough in Latin to give the required \"Habilitationsschrift\" lecture which was requirement for becoming a \"full professor\". So like many \"adjunct professors\" today, Dirichlet took a side gig to support his family. He taught math at a military school.  Anyway, I digress. It was about that time that Dirichlet began to work on a problem in celestial mechanics which involved this integral:\n\n\n$$\\quad I := \\iiint_{S_s} \\frac{dx\\, dy\\, dz}{\\rho^p}$$\n\nHere $(x,y,z) \\in R^3$ which is attracted to a point $(a,b,c)$ where $1/\\rho^p$ is the force of attraction $(1 < p <3)$ and $\\rho^2 := (x - a)^2 + (y - b)^2 + (z - c)^2$ is the Euclidean norm.\n\nAfter a supernaturally insightful series manipulations detailed by [Gupta and Richards](https://www.jstor.org/stable/1403524), Dirichlet arrived at the following integral \n\n\n$$\\int_{S_s} \\left(1 - \\sum_{i=1}^n x_i^2 \\right)^{\\alpha - 1} x_1^{v_1} x_2^{v_2} \\cdots x_n^{v_n} \\, dx_1 dx_2 \\cdots dx_n = \\frac{\\Gamma(\\alpha) \\Gamma\\left(\\frac{1 + v_1}{2}\\right) \\cdots \\Gamma\\left(\\frac{1 + v_n}{2}\\right)}{\\Gamma\\left(\\alpha + \\frac{n + v_1 + \\cdots + v_n}{2}\\right)}$$\nwhich you will recognize as the normalizing constant for the Dirichlet distribution.\n\n$$f(x_1, \\dots, x_K; \\alpha_1, \\dots, \\alpha_K) = \n\\frac{1}{\\mathrm{B}(\\boldsymbol{\\alpha})} \n\\prod_{i=1}^{K} x_i^{\\alpha_i - 1}$$\nwhere\n\n$\\mathrm{B}(\\boldsymbol{\\alpha}) = \n\\frac{\\prod_{i=1}^{K} \\Gamma(\\alpha_i)}{\\Gamma\\left(\\sum_{i=1}^{K} \\alpha_i\\right)}$ and $\\alpha_0 = \\sum_{i=1}^{K} \\alpha_i$\n\nThe Wikipedia article on the [Dirichlet distribution](https://en.wikipedia.org/wiki/Dirichlet_distribution) is quite nice, a great place to begin studying the Dirichlet distribution itself and to gain an appreciation for how it brings together 18th and 19th century work in analysis as exemplified by the Gamma, Beta and digamma functions with early 20th ideas from geometry and topology (the simplex) and modern Bayesian statistics. The simplex idea is particularly interesting. A simplex is a generalization of the notion of a triangle to multiple dimensions. The support of a three dimensional Dirichlet distribution, the points on which the distribution is defined, is a (2)-simplex or triangle. In K dimensions, the Dirichlet distribution is defined over the (K-1)-simplex, which is the set of K-dimensional vectors that sum to 1 and have non-negative components. So, in addition to being the support of the Dirichlet distribution, the simplex is also a natural way to represent probabilities that sum to 1 in multidimensional spaces.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nlibrary(ggplot2)\nlibrary(gganimate)\nlibrary(dplyr)\nlibrary(magick)\nlibrary(MCMCpack)  # for rdirichlet\nlibrary(gtools)  # for ddirichlet\nlibrary(patchwork)  # for combining plots\n```\n:::\n\n\n\nWhen $\\alpha_1 = \\alpha_2 = \\alpha_3 = constant$, the density is symmetric about the middle of the simplex. In the special case when $\\alpha = (1, 1, 1)$, the density is uniform over the simplex. When all the $\\alpha_i < 1$ the density is concentrated at the vertices of the simplex, and when $\\alpha_i > 1$, the density is concentrated in the center of the simplex. The following shows how the Dirichlet distribution changes as the $\\alpha$ parameters move systematically from (1,1,1), the uniform distribution, to (0.1,0.1,0.1). \n\n\n\n## Helper Functions\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# This function generates the data frame for the animation\ngenerate_dirichlet_animation_data <- function(alpha1_values, alpha2_values, alpha3_values, n_samples = 2000) {\n  library(MCMCpack)\n  \n  # Triangle vertices\n  v1 <- c(1, 0)\n  v2 <- c(0, 1)\n  v3 <- c(0, 0)\n  \n  # Projection function\n  project_to_triangle <- function(x1, x2, x3) {\n    x <- x1 * v1[1] + x2 * v2[1] + x3 * v3[1]\n    y <- x1 * v1[2] + x2 * v2[2] + x3 * v3[2]\n    data.frame(x = x, y = y)\n  }\n  \n  # Generate animation data\n  animation_data <- do.call(rbind, lapply(seq_along(alpha1_values), function(i) {\n    alpha <- c(alpha1_values[i], alpha2_values[i], alpha3_values[i])\n    samples <- rdirichlet(n_samples, alpha)\n    projected <- project_to_triangle(samples[,1], samples[,2], samples[,3])\n    projected$alpha1 <- alpha[1]\n    projected$alpha2 <- alpha[2]\n    projected$alpha3 <- alpha[3]\n    projected$frame <- i\n    projected\n  }))\n  \n  return(animation_data)\n}\n\n# This function creates the animated plot\nplot_dirichlet_evolution <- function(animation_data) {\n  library(ggplot2)\n  library(gganimate)\n  library(grid)  # for arrow units\n  \n  # Triangle vertices\n  v1 <- c(1, 0)\n  v2 <- c(0, 1)\n  v3 <- c(0, 0)\n  \n  # Label positions\n  label_df <- data.frame(\n    x = c(v1[1], v2[1], v3[1]),\n    y = c(v1[2], v2[2], v3[2]),\n    label = c(\"(1,0,0)\", \"(0,1,0)\", \"(0,0,1)\"),\n    nudge_x = c(-0.08, 0.1, 0),\n    nudge_y = c(0, 0, 0.08)\n  )\n  \n  # Triangle outline\n  triangle_df <- data.frame(\n    x = c(v1[1], v2[1], v3[1], v1[1]),\n    y = c(v1[2], v2[2], v3[2], v1[2])\n  )\n  \n  # Build plot\n  p_animation <- ggplot(animation_data, aes(x = x, y = y)) +\n    geom_point(alpha = 0.3, size = 0.8, color = \"steelblue\") +\n    geom_density_2d(color = \"red\", alpha = 0.7) +\n    geom_path(data = triangle_df, aes(x = x, y = y), color = \"black\", size = 1) +\n    annotate(\"segment\", x = 1, y = 0, xend = 0, yend = 1,\n             arrow = arrow(length = unit(0.2, \"cm\")),\n             color = \"darkgreen\", size = 1.2) +\n    xlim(0, 1) + ylim(0, 1) +\n    geom_text(data = label_df,\n              aes(x = x, y = y, label = label),\n              nudge_x = label_df$nudge_x,\n              nudge_y = label_df$nudge_y,\n              size = 4, fontface = \"bold\", color = \"black\") +\n    labs(\n      title = \"Dirichlet Prior Evolution\",\n      subtitle = \"\",\n      x = \"Projected X\",\n      y = \"Projected Y\",\n      caption = \"Transitioning belief over simplex\"\n    ) +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(size = 16, hjust = 0.5),\n      plot.subtitle = element_text(size = 14, hjust = 0.5),\n      axis.title = element_text(size = 12),\n      plot.caption = element_text(size = 10, hjust = 0.5)\n    ) +\n    transition_states(frame,\n                      transition_length = 1,\n                      state_length = 2) +\n    ease_aes('sine-in-out')\n  \n  return(p_animation)\n}\n```\n:::\n\n\n\n\n## Run the Animation\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nset.seed(42)\n\n# Parameters\nalpha1_values <- seq(1, 0.1, by = -0.01)  # starts high, ends low\nalpha2_values <- seq(1, 0.1, by = -0.01)   # starts low, ends high\nalpha3_values <- seq(1, 0.1, by = -0.01)   # starts low, ends high\n\nanimation_data <- generate_dirichlet_animation_data(alpha1 = alpha1_values, \n                                                    alpha2 = alpha2_values, \n                                                    alpha3 = alpha3_values, \n                                                    n_samples = 2000)\n\nplot_dirichlet_evolution(animation_data)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.gif)\n:::\n:::\n\n\n\n\n\n\n\nLooking at the first and last frames of the animation shows how the density moves from being uniformly distributed over the simplex to being concentrated at the vertices of the simplex.\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(subset(animation_data, frame == 1), aes(x = x, y = y)) +\n  geom_point(alpha = 0.3, color = \"darkblue\") +\n  ggtitle(\"Initial Frame: Uniform Prior: alpha = (1,1,1)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"10%\"}\n\n:::\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n  ggplot(subset(animation_data, frame == max(animation_data$frame)), aes(x = x, y = y)) +\n  geom_point(alpha = 0.3, color = \"red\") +\n  ggtitle(\"Final Frame: Concetrated Prior: alpha = (.1,.1,.1)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n\n\n::::\n\n\n\n\n\n\n\n\n## References\n\nBela A. Frigyik, Amol Kapila, and Maya R. Gupta, [Introduction to the Dirichlet Distribution and Related Processes](https://web.archive.org/web/20150219021331/https://www.ee.washington.edu/techsite/papers/documents/UWEETR-2010-0006.pdf)\n\nRameshwar Gupta and Donald St. P. Richards, [The History of the Dirchet and Liouville Distributions](https://en.wikipedia.org/wiki/Peter_Gustav_Lejeune_Dirichlets) international Statistical Review (2001) \n\nAndrew Heiss, [Guide to understanding the intuition behind the Dirichlet distribution](https://www.andrewheiss.com/blog/2023/09/18/understanding-dirichlet-beta-intuition/#:~:text=The%20distribution%20is%20named%20after,in%20a%20French%2Dsounding%20way.)\n\nJiayu Lin, [On the Dirichlet Distribution](https://qspace.library.queensu.ca/server/api/core/bitstreams/0a2eb9d4-145a-4e76-84eb-1aa16d6670aa/content)\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\nAAA\n\n:::\n\n::: {.column width=\"10%\"}\n\n:::\n\n::: {.column width=\"45%\"}\n\nBBB\n\n\n:::\n\n\n::::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}