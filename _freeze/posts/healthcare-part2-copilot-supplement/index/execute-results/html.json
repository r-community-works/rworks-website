{
  "hash": "b57aae2d9a29254fb8135787d44db928",
  "result": {
    "markdown": "---\ntitle: \"Health Technology notes: Copilot tips and guidance\"\nauthor: \"Vidisha Vachharajani\"\ndate: \"2025-07-30\"\ndescription: \"In this post, we walk the reader through the fundamental driver of successfully using AI agents – prompting. Prompting is the method of instructing an LLM to perform a task by carefully designing an input text.\"\nimage: \"Copilot_start.png\"\nimage-alt: \"Screen showing cop9poy session\"\neditor: source\n---\n\n\n## 1. Introduction\n\n### 1.1. The use of AI agents and the case for \"prompt\" choices\n\nWe [introduced](https://rworks.dev/posts/healthcare-part1/) the use of the AI pair programmer, Copilot, while working with `tidyverse`. In this post, we walk the reader through the fundamental driver of successfully using AI agents – prompting. Prompting is the method of instructing an LLM to perform a task by carefully designing an input text. Our prompting will be the \"regular\" or \"zero-shot\" prompting, the most commonly used prompting [technique](https://towardsdatascience.com/recap-of-all-types-of-llm-agents/) where you simply ask the agent a question and receive an answer. Typically, while using this, iteration is recommended to get to a more exact answer, especially with coding outputs. This technique is flexible and easy to use, but in my other more complex coding and analytics workflows, I have also used [few-shot](https://www.datacamp.com/tutorial/few-shot-prompting) prompting, where you provide the LLM with examples and/or context in your prompt. In this post, we will focus on iterative zero-shot prompting.\n\n### 1.2. A recap of getting started with Copilot in RStudio\n\n> ***Setting up Copilot in RStudio:** Adding Copilot as a pair programmer to your RStudio is simple, and has a seamless interface.* *Take a look at the Posit documentation [**here**](https://docs.posit.co/ide/user/ide/guide/tools/copilot.html)***.** *Make sure to enable it! See below.*\n\n![](Copilot_start.png){width=\"538\"}\n\n## 2. Using Copilot to get data summaries\n\nAfter cleaning our data like we do in this [snippet](https://github.com/VidishaVac/healthcare-analytics/blob/main/cleanDiabetic_data.R), we will now use Copilot for our first task – to get some useful summaries of the fields we think are likely to impact patient care outcomes. We do this in section 2 of our analytics post. Note that to give the right guidance to Copilot for these summaries, we would need to know what fields we are summarizing, and their underlying `class` within your R workspace, all of which we will specify in our prompt.\n\nThese are the fields we will summarize.\n\n| Field name | Field type | Field description |\n|--------------|--------------|---------------------------------------------|\n| `primary_diag` | initial admission covariate | primary diagnosis upon admission |\n| `a1c` | initial admission covariate | whether a patient was given the A1c test or not |\n| `diabetesMed` | intermediate response | whether a patient was given any diabetes medication |\n| `acarbose:troglitazone` | intermediate response | individual 23 diabetes medications that were prescribed or not, and if prescribed, were held steady, increased or decreased |\n| `readmitted` | final response | whether the patient was readmitted early (\\<30 days) |\n\nTable 1: Important data fields and their descriptions\n\n> ***Notes:** Take a look at the clip where I show the prompt I wrote to get to the summary code. Note the following -*\n>\n> 1.  *The ghost text auto-complete that is typical of Copilot once you begin materializing the initial line of the code.*\n> 2.  *The specifics of the prompt - the field names and that they are `factor` fields, etc.*\n>\n> *Note that I went back and modified the prompt since I forgot to ask it to include frequency percentages. I also went back and added `arrange()` myself in order to enable sorting for a neater look. Right after the video, see the final code that was used in the analysis. Note that this does not get us to the final kable outputs and table formatting, which were done manually.*\n\n\n{{< video summaryMovie.mov >}}\n\n\n\nClick on \"Show the code\" to see the Copilot code output from the above interaction.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# ---------- ---------- ---------- ---------- #\n# Final code output after iterating with Copilot \n# ---------- ---------- ---------- ---------- #\nsummary_a1c <- D %>%\n  group_by(a1c) %>%\n  summarise(count = n(), percent = n() / nrow(D) * 100) %>%\n  arrange(desc(percent))\nsummary_primary_diag <- D %>% \n  group_by(primary_diag) %>%\n  summarise(count = n(), percent = n() / nrow(D) * 100) %>%\n  arrange(desc(percent))\nsummary_readmitted <- D %>% \n  group_by(readmitted) %>%\n  summarise(count = n(), percent = n() / nrow(D) * 100) %>%\n  arrange(desc(percent))\nsummary_change <- D %>% \n  group_by(change) %>%\n  summarise(count = n(), percent = n() / nrow(D) * 100) %>%\n  arrange(desc(percent))\nsummary_diabetesMed <- D %>% \n  group_by(diabetesMed) %>%\n  summarise(count = n(), percent = n() / nrow(D) * 100) %>%\n  arrange(desc(percent))\n```\n:::\n\n\nClick on \"Show the code\" to see the final code used to clean the data and generate the summaries.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# --------------------------------------------- #\n# Load necessary libraries\n# --------------------------------------------- #\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(kableExtra)\nlibrary(gridExtra)\nlibrary(grid)\nlibrary(lattice)\n\n# --------------------------------------------- #\n# Read in the data\n# --------------------------------------------- #\n\nD <- read.csv(\"https://raw.githubusercontent.com/VidishaVac/healthcare-analytics/refs/heads/main/dataset_diabetes/diabetic_data.csv\", sep=\",\")\n\n# -------------------------------------------------------- #\n# Clean and re-define HbA1c and primary diag\n# -------------------------------------------------------- #\n\nD <- D %>%\n  mutate(a1c=ifelse(A1Cresult==\"None\", \"not measured\", \"measured\"), \n         primary_diag = case_when(\n    diag_1 %in% c(390:459, 785) ~ \"Circulatory\",\n    diag_1 %in% c(460:519, 786) ~ \"Respiratory\",\n    diag_1 %in% c(520:579, 787) ~ \"Digestive\",\n    diag_1 %in% c(580:629, 788) ~ \"Genitourinary\",\n    diag_1 %in% c(630:679) ~ \"Pregnancy\",\n    diag_1 %in% c(680:709, 782) ~ \"Skin\",\n    diag_1 %in% c(710:739) ~ \"Musculoskeletal\",\n    diag_1 %in% c(740:759) ~ \"Congenital\",\n    diag_1 %in% c(800:999) ~ \"Injury\",\n    grepl(\"^250\", diag_1) ~ \"Diabetes\",\n    is.na(diag_1) ~ \"Missing\",\n    TRUE ~ \"Other\"\n  ))\n\n# Remove columns not used, patients with a discharge disposition of \"expired\" or \"hospice\"\nD <- D %>% select(1,2,7:9,25:52) %>% \n  filter(!discharge_disposition_id %in% c('11','13','14','19','20','21'))\n\n# Summarize\nsummary_a1c <- D %>%\n  group_by(a1c) %>%\n  summarise(count = n(), percent = n() / nrow(D) * 100) %>%\n  arrange(desc(percent))\nsummary_primary_diag <- D %>% \n  group_by(primary_diag) %>%\n  summarise(count = n(), percent = n() / nrow(D) * 100) %>%\n  arrange(desc(percent))\nsummary_readmitted <- D %>% \n  group_by(readmitted) %>%\n  summarise(count = n(), percent = n() / nrow(D) * 100) %>%\n  arrange(desc(percent))\nsummary_change <- D %>% \n  group_by(change) %>%\n  summarise(count = n(), percent = n() / nrow(D) * 100) %>%\n  arrange(desc(percent))\nsummary_diabetesMed <- D %>% \n  group_by(diabetesMed) %>%\n  summarise(count = n(), percent = n() / nrow(D) * 100) %>%\n  arrange(desc(percent))\n\n# summary_primary_diag %>% \n#   kable(digits = 1, format.args = list(big.mark = \",\"), \n#         caption = \"Breakdown of the primary patient diagnosis upon admission for a diabetic encounter\") %>%\n#           row_spec(1, background = \"yellow\", font_size = \"larger\")\n```\n:::\n\n\nWe show an example summary for patient primary diagnosis on admission – notice how circulatory diagnoses account for the most common reason for hospital admissions in diabetic encounters. This is a vital insight and an important theme that will run through our analyses.\n\nTo make the summary data easier to consume, we use a circular bar plot. While I did not use Copilot for the actual bar plot, I used GPT-4o (directly in a browser) to achieve this clean 2-column look for the plot and its notes to the right. See here for the full conversation.\n\nFinally, see \"Plot notes\" for details on the design.\n\n:::::: columns\n::: {.column width=\"65%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/Chunk21-1.png){width=960}\n:::\n:::\n\n:::\n\n:::: {.column width=\"35%\"}\n::: {.callout-note title=\"Plot notes\"}\n[*The circular bar plot offers a visually engaging and effective way to convey categorical comparisons, combining aesthetic appeal with immediate interpretability. One of the strengths of the design here is its ability to simultaneously emphasize both absolute and relative differences through clear axis labeling and proportional arc length. For instance, circulatory disease accounts for 30% of the sample — roughly 30,000 encounters — while diabetes as a primary admission diagnosis represents just 9%, or fewer than 10,000. These contrasts are instantly evident not only in the numbers but also in the visual impact of the plot. The minimalist style, paired with concise explanatory text above the chart, makes each visual a self-contained and accessible summary — both analytically rich and reader-friendly.*]{style=\"font-size: 0.8em;\"}\n:::\n::::\n::::::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ndf <- summary_primary_diag\ndf <- df %>% mutate(\n  label=c(paste(round(df$percent[1:5]), \"%\", sep=\"\"),rep(NA,nrow(df)-5)))\n\n\np0 <- ggplot(data=df, aes(x=reorder(primary_diag,count), y=count, fill=percent)) +\n  geom_bar(stat=\"identity\", color=\"black\") + \n  coord_polar() +\n  scale_fill_gradientn(\n    \"Percent\",\n    colours = c( \"#6C5B7B\",\"#C06C84\",\"#F67280\",\"#F8B195\")) +\n  geom_text(aes(x=primary_diag, y=count/2,label = label), size=3.5, \n            color=\"black\",\n            fontface=\"bold\") +\nscale_y_continuous(breaks = seq(0, 40000, by = 10000),\n                  limits = c(-10000, 40000),\n                  expand = c(0, 0)) +\n  annotate(\"text\", x = 11.95, y = 12000, label = \"10,000\", size = 2.5, color = \"black\") +\n  annotate(\"text\", x = 11.95, y = 22000, label = \"20,000\", size = 2.5, color = \"black\") +\n  annotate(\"text\", x = 11.95, y = 32000, label = \"30,000\", size = 2.5, color = \"black\") +\n    theme(\n    # Remove axis ticks and text\n    axis.title = element_blank(),\n    axis.ticks = element_blank(),\n    axis.text.y = element_blank(),\n    # Use gray text for the region names\n    axis.text.x = element_text(color = \"gray12\", size = 10),\n    legend.position = \"none\",\n    plot.title = element_text(face = \"bold\", size = 15),\n    plot.subtitle = element_text(size = 9)) +\n  # Add labels\n  labs(\n    title = \"\\nPatient primary diagnoses\",\n    subtitle = paste(\n      \"\\nPrimary diagnoses of admitted patients vary considerably.\",\n      \"Even for diabetic encounters, the most common admitting diagnosis\",\n      \"is circulatory or heart disease. We will call this out in our analysis,\",\n      \"comparing patient outcomes for these high-risk but non-diabetic\",\n      \"admissions with diabetic admissions (which are only 9% of the\",\n      \"admitting or primary diagnoses).\",\n      sep = \"\\n\"\n    )) \n```\n:::\n\n\n## 3. Prompting pitfalls: What You Ask Is What You Get\n\nCopilot is powerful and easy to use, but in this section, we'll dive a little more into the importance of iteration – how effective prompting often requires fine-tuning, and how insufficient or non-specific guidance can lead you astray.\n\nConsider the 23 medication prescriptions, each categorized into one of four levels: 𝘕𝘰, 𝘚𝘵𝘦𝘢𝘥𝘺, 𝘜𝘱, or 𝘋𝘰𝘸𝘯., where the medications include well-known drugs like insulin and metformin. I wanted a strong visual for looking at all 23 in 1 plot, and I started with my own code for a bar plot. Next, I wanted to explore alternate plot types that could reveal more nuanced insights.\n\n🖼️ In the image below, you can follow my conversation with Copilot: I began with a vague prompt (“Can you fix this blank plot?”) Then refined it a little (“Can you use a different kind of plot?”) Finally, I gave it the specific guidance it needed (which variables to use and how to specify its aesthetics)\n\n🔍 Only when I provided clear, well-scoped instructions did Copilot return a useful, meaningful visualization.\n\n💡 Takeaway: The quality of your output depends on the quality of your prompt. Copilot is powerful, but only if you guide it with precision.\n\n![](convo.png){width=\"785\"}\n\nClick on \"Show the code\" to see the actual back-and-forth conversation with Copilot that was the basis of the final visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# ---------- # \n# Prompt 1\n# ---------- # \n\n# Consider \"meds\" and \"p0\" above. \n# Can you recommend a plot that is not geom_col \n# or geom_bar but that will capture how they are \n# being prescribed, using \"freq\"?\n\n# ---------- # \n# Output 1\n# ---------- # \n\np1 <- ggplot(data=meds, aes(x=medication, y=freq, fill=value)) + \n  geom_area(position = \"fill\") + \n  theme_minimal() + \n  coord_flip() +\n  labs(title = \"Proportion of Medication Prescriptions\", y = \"Proportion (%)\", x = \"Medication\")\n\n# ---------- # \n# Prompt 2\n# ---------- # \n\n# This plot above is blank, can you fix this?\n\n# ---------- # \n# Output 2\n# ---------- # \n\np1 <- ggplot(data=meds, aes(x=medication, y=freq, fill=value)) + \n  geom_area(position = \"fill\") + \n  theme_minimal() + \n  coord_flip() +\n  labs(title = \"Proportion of Medication Prescriptions\", y = \"Proportion (%)\", x = \"Medication\") +\n  scale_y_continuous(labels = scales::percent_format(scale = 1))\n\n# ---------- # \n# Prompt 3\n# ---------- # \n\n# It is still blank, can you use a different type of plot?\n\n# ---------- # \n# Output 3\n# ---------- # \n\np2 <- ggplot(data=meds, aes(x=medication, y=freq, fill=value)) + \n  geom_tile() + \n  theme_minimal() + \n  coord_flip() +\n  labs(title = \"Medication Prescription Frequency\", y = \"Frequency (%)\", x = \"Medication\") +\n  scale_y_continuous(labels = scales::percent_format(scale = 1))\n\n# ---------- # \n# Prompt 4\n# ---------- # \n\n# Do you think geom_tile needs \"medication\" and \"value\" to be on the axes and \"freq\"\n# to be the fill?\n\n# ---------- # \n# Output 4\n# ---------- # \n\np3 <- ggplot(data=meds, aes(x=value, y=medication, fill=freq)) + \n  geom_tile() + \n  theme_minimal() + \n  labs(title = \"Medication Prescription Frequency\", y = \"Medication\", x = \"Value\") +\n  scale_fill_gradient(low = \"blue\", high = \"red\") +\n  scale_x_continuous(labels = scales::percent_format(scale = 1))\n\n# ---------- # \n# Final tweak -- Prompt 5\n# ---------- # \n\n# It seems discrete values have been supplied to continuous scale, can you fix?\n\n# ---------- # \n# Output 5\n# ---------- # \n\np4 <- ggplot(data=meds, aes(x=value, y=medication, fill=freq)) + \n  geom_tile() + \n  theme_minimal() + \n  labs(title = \"Medication Prescription Frequency\", y = \"Medication\", x = \"Value\") +\n  scale_fill_gradient(low = \"blue\", high = \"red\") +\n  scale_x_discrete(labels = scales::percent_format(scale = 1))\n```\n:::\n\n\nLet's see the final code used for the visualization outputs, generated from the Copilot conversation above. See plot design notes below for the motivation behind the original bar plot and the crucial difference between the specifications of the 2 plots, and how it relates back to the Copilot iteration above. Click on \"Show the code\" to see the underlying plot generating code.\n\n### Plot 1: Original barplot with flipped coordinates\n\n:::::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Reshaping wide to get a better view of medications\nmeds <- D %>%\n  select(metformin:metformin.pioglitazone) %>%\n  gather(key = \"medication\", value = \"value\") %>%\n  group_by(medication, value) %>% summarise(n=n()) %>% mutate(pct = (n / sum(n))*100)\n\n# My original barplot with flipped coordinates\np0 <- ggplot(data=meds, aes(x=medication, y=pct, fill=value)) + geom_col() + \n  labs(title = \"Diabetes medications bar plot\",\n       x = \"Medication name\",\n       y = \"Percent prescribed\", fill=\"Medication value\") + theme_minimal() + coord_flip() +\n  theme(plot.title = element_text(hjust = 0.5))\n\np0\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Chunk3-1.png){width=672}\n:::\n:::\n\n:::\n\n:::: {.column width=\"50%\"}\n::: {.callout-note title=\"Plot notes\"}\n***Plot notes:** The original barplot on the left is a slightly different use of `geom_col()`. While it is normally used for a bar chart use case, in this plot, it has a quite useful \"heatmap\" look. By using `coord_flip()`, we are able to clearly see the full name of each medication. In my mind, this is a slightly better look than having the medication names be on the x-axis at a 45-degree angle. We enhanced this further by also using `geom_tile()`.*\n:::\n::::\n::::::\n\n### Plot 2: Heatmap with improved palette and labels\n\n:::::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Heatmap with improved color palette and labels\np1 <- ggplot(data=meds, aes(x=value, y=medication, fill=pct)) + geom_tile() + \n  labs(title = \"Diabetes medication heatmap\",\n       x = \"Medication value\",\n       y = \"Medication name\", fill=\"Percent prescribed\") + theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5)) + \n  scale_fill_gradientn(colors = palette.colors(9), \n                       limits = c(0, 100)) +\n  geom_text(aes(label = paste(round(pct, 1), \"%\", sep=\"\")), color = \"white\", size = 3) \n\np1\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Chunk4-1.png){width=672}\n:::\n:::\n\n:::\n\n:::: {.column width=\"50%\"}\n::: {.callout-note title=\"Plot notes\"}\n[***Plot notes**: Upon switching to a `geom_tile()`*]{style=\"font-size: 0.95em;\"} *heatmap plot, the more nuanced prescription variations become much more evident. However, the default color parameters from Copilot output 4 does not offer this as clearly. I adjust these color parameters to make them more robust under color vision deficiencies, making them easily distinguishable for all viewers, and surfacing the actual variations across medications prescribed. I also add data labels to the final plot.*\n:::\n::::\n::::::\n\nFinally, notice the very important difference in the `aes()` specifications between the 2 plots, which is where the Copilot output 3 from the conversation goes awry, and needs a fine-tuned prompt – for the left hand side `geom_col()`, the `fill` parameter is the `value` or the levels of the medication, while for the right hand side `geom_tile()`, its the actual percent. The legend to the right of each plot shows this.\n\n## 4. What's next\n\nWe will continue showcasing the use of AI agents in our healthcare analytics workflow while using `tidyverse`, to demonstrate how health technology can benefit stakeholders in this industry, especially given the richness of the data sitting in our health systems. Effectively mining this data using the right tools in order to extract insights that impact care delivery decisions is not just our end goal, but also crucial for the advancement of the use of technology in healthcare.\n\n## About the Author\n\n*Vidisha writes: \"I am a statistician and data science professional. For practitioners like me, 'tidyverse' is a household word. I’ve used it for complex data wrangling, visualization, and advanced analytics work, especially where I needed clarity on how to leverage my data so that it allows for story-telling that informs business decisions, recasting my work into actionable insights. I recently began exploring GPT-4o mini and GitHub Copilot to help me speed up my workflows, especially within Healthcare Analytics. I am excited to share this post series to help readers understand the role of RStudio and AI in Healthcare Analytics!\"*\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}