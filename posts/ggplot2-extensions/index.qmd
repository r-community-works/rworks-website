---
title: "Speak your plot into existence by writing your own ggplot2 extension"
author: "Isabella Velásquez"
date: 2024-11-15
editor: source
description: "100 bushes of corn are distributed to 100 people such that every man receives 3 bushels, every woman 2 bushels, and every child 1/2 a bushel. How many men, women, and children are there? (Solved with R)."
image: ggextenders-hex.png
image-alt: "ggextenders hex showing the image of a cat stretching"
page-layout: article
format:
  closeread-html:
    cr-style:
      narrative-background-color-overlay: transparent
      narrative-background-color-sidebar: transparent
      section-background-color: transparent
      narrative-text-color-overlay: black
---

If you use ggplot2, you are probably used to creating plots with `geom_line()` and `geom_point()`. You may also have ventured into to the broader ggplot2 ecosystem to use geoms like `geom_density_ridges()` from [ggridges](https://wilkelab.org/ggridges/) or `geom_signif()` from [ggsignif](https://const-ae.github.io/ggsignif/). But have you ever wondered _how_ these extensions were created? Where did the authors figure out how to create a new geom? And---if the plot of your dreams doesn't exist---how would you make your own?

Enter the exciting world of creating your own ggplot2 extensions.

I had the pleasure of meeting [Gina Reynolds](https://github.com/EvaMaeRey) when I first began my job at Posit and she was contributing a blog post on [flipbookr](https://evamaerey.github.io/ggplot_flipbook/ggplot_flipbook_xaringan.html#1). Since then, we've kept in touch through the [ggextenders](https://ggplot2-extenders.github.io/ggplot-extension-club/) extension club. Every few months, the club meets virtually to hear from a ggextender. The speaker can talk about a custom geom they've created for the community or more general R visualization topics. In these meetings I've learned about cool packages like [ggstats](https://larmarange.github.io/ggstats/). Each presentation is insightful and interesting---[join us sometime](https://docs.google.com/forms/d/e/1FAIpQLSe3M1KwUPrmTfEGuuQp0fZ0J7dZkk_82gb310JCvdouMTa_7Q/viewform)!

However, I was never a "ggextender" myself and more a great appreciator of ggextensions. That is, until recently!

Gina held a focus group that worked through the [Easy geom recipes](https://evamaerey.github.io/easy-geom-recipes/), a series of tutorials on creating ggplot2 extensions. Following "recipes", you methodically create three extensions. Each time, certain key knowledge points are reinforced and new variations are introduced.

So, let's say we want to create a new `geom_*()` that adds a point on the median of the x-axis and y-axis variables of a plot. We will call it `geom_medians()`. Let's follow the recipe:

:::{.cr-section}

## Step 0. Get the job done with 'base' ggplot2.

First, clarify what needs to happen without getting into the extension architecture. Load the tidyverse package and the palmerpenguins package. [@cr-step01]{highlight="1,2"}

Remove the missing values from the `penguins` dataset. [@cr-step01]{highlight="4"}

Calculate the median of the x variable (`bill_length_mm`) and y variable (`bill_depth_mm`) as you would normally. [@cr-step01]{highlight="6,7,8,9"}

:::{#cr-step01 .scale-to-fill}
```{r}
#| echo: true
#| message: false
#| warning: false
library(tidyverse)
library(palmerpenguins)

penguins_clean <- remove_missing(penguins)

# Compute
penguins_medians <- penguins_clean |> 
  summarize(bill_length_mm_median = median(bill_length_mm),
            bill_depth_mm_median = median(bill_depth_mm))
```
:::

Now, use base ggplot2 to get the job done.[@cr-step02]

This requires specifying `bill_depth_mm_median` and `bill_length_mm_median`, which we just created, within `aes()` in `geom_point()`.[@cr-step02]{highlight="7,8"}

:::{#cr-step02 .scale-to-fill}
```{r}
#| echo: true
#| eval: false
# Plot
penguins_clean |> 
  ggplot() + 
  aes(x = bill_depth_mm, y = bill_length_mm) + 
  geom_point() + 
  geom_point(data = penguins_medians,
             aes(x = bill_depth_mm_median,
                 y = bill_length_mm_median),
             size = 8, color = "red") + 
  labs(title = "Created with base ggplot2")
```
:::

This is the resulting plot.[@cr-step03]

:::{#cr-step03 .scale-to-fill}
```{r}
# Plot
penguins_clean |> 
  ggplot() + 
  aes(x = bill_depth_mm, y = bill_length_mm) + 
  geom_point() + 
  geom_point(data = penguins_medians,
             aes(x = bill_depth_mm_median,
                 y = bill_length_mm_median),
             size = 8, color = "red") + 
  labs(title = "Created with base ggplot2")
```
:::

## Step 1: Define Compute and test.

Define the compute that will transform your input data before rendering it.[@cr-step11]

:::{#cr-step11 .scale-to-fill}
```{r}
#| echo: true
#| message: false
#| warning: false
# Define compute.
compute_group_medians <- function(data, scales){ 
  data |> 
    summarize(x = median(x),
              y = median(y))
}
```

:::


:::

A fun note is that the geom recipes website uses [webR](https://docs.r-wasm.org/webr/latest/) and [Quarto Live](https://github.com/r-wasm/quarto-live) to embed interactive code chunks directly in the tutorial. It makes for an immersive experience while going through the exercises.

## Resources

It's a true delight going through Gina's resources, from seeing the [adorable ggextenders hex](https://evamaerey.github.io/everyday_ggplot2_extension/community.html) to reading all the touching notes about ggplot2, comparing it to art, food, and more. It's a true testament of how a tool can inspire so many. Here are some of my favorites quotations and metaphors:

* "ggplot2 lets users 'speak their plots into existence'"
* "You are a composer of ‘graphical poems’"

Learn more about Gina's work here:

* [Everyday ggplot2 extension](https://evamaerey.github.io/everyday_ggplot2_extension/): education materials for potential extenders 
* [ggplot2 extension cookbook](https://evamaerey.github.io/ggplot2-extension-cookbook/): Guide that presents extension strategies in a consistent and accessible way
* [ggplot2 extenders club website](https://ggplot2-extenders.github.io/ggplot-extension-club/): See previous talks and sign up for future webinars
* [Easy geom recipes](https://evamaerey.github.io/easy-geom-recipes/): Try your hand at creating your first extension!

More resources on ggplot2 extensions:

* [Extending your ability to extend ggplot2](https://www.youtube.com/watch?v=uj7A3i2fi54): Thomas Lin Pederson's talk from rstudio::conf(2020) on entering the world of ggplot2 extensions
* [Writing ggplot2 extensions chapter in ggplot2: Elegant Graphics for Data Analysis (3e)](https://ggplot2-book.org/extensions.html) by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen
