
---
title: "ARIMA NOTE"
author: "Joseph Rickert"
date: 2025-03-25
code-fold: true
code-summary: "Show the code"
description: "."
categories: ""
editor: source
---

In my previous post [A First Look at TimeGPT using nixtlar](https://rworks.dev/posts/revised_TimeGPT/), I used the `auto.arima()` function from the `forecast` package to fit an ARIMA model to a time series of electricity usage data in order to compare and ARIMA forecast with the `TimeGPT` forecast. While working out the bugs in that post, I also fit an automatic ARIMA model using the newer and improved `fable` package and was very surprised by the results. In this post I will show what surprised me, work through my investigation and and with an interesting question.

Here are the necessary libraries and the data that we will be working with.

```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: true
#| code-summary: "Show the code"
library(tidyverse)
library(forecast)
library(fable)
library(tsibble)
library(nixtlar)
```

As in the `TimeGPT` post, I will use the BE electricity usage data set from the `nixtlar` package for fitting models and making forecasts. Let's take a look at the data.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
df <- nixtlar::electricity
#glimpse(df)

df2 <- df |> mutate(time = as.POSIXct(ds, format = "%Y-%m-%d %H:%M:%S")) |> 
             filter(unique_id == "BE") |> select(-unique_id, -ds)
  

p <- df2 |> ggplot(aes(x = time, y = y)) +
  geom_line(color='darkblue') +
  ggtitle(" BE Electricity Usage Data")

p
```

This next block of code splits the data into training and test data with the last 24 observations from the BE data set being held out for forecasting.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
NF <- 24

BE_df_wide <- df |> pivot_wider(names_from = unique_id, values_from = y) |>
  select(ds, BE) |> drop_na()

BE_train_df <- BE_df_wide %>% filter(row_number() <= n() - NF)
BE_test_df <- tail(BE_df_wide, NF)
BE_train_df <- BE_train_df |> rename(y = BE) |> mutate(unique_id = "BE")
BE_test_df <- BE_test_df |> rename(y = BE)
```

This section of code reformats the training data into a format that is suitable for the `auto.arima()` which requires that the data be expressed as a `ts()` object. 

```{r}
#| code-fold: true
#| code-summary: "Show the code"

train <- BE_train_df |> select(-unique_id) |>
mutate(time = 1:length(ds))|> select(-ds)
elec_ts <- ts(train$y, frequency = 24)
```

And now, the first AIRMA forecast using the `forecast` package.  Notice that the plot title reports that the `forecast::arime()` function fitted an ARIMA(2,1,1)(1,0,1)[24] model to the data.

```{r}
#| code-fold: TRUE
#| code-summary: "Show the code"
#| message: FALSE
#| warning: FALSE
#arima <- elec_ts |>
#  forecast::auto.arima() |>
#  forecast(h = NF , level = 95)
#saveRDS(arima, "arima_forecast.rds")
arima<- readRDS("arima_forecast.rds")

plot(arima, col="darkblue")
```


Here, I extract the forecast and set up a data frame to hold the comparative forecasts.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| message: FALSE
#| warning: FALSE
arima_fcst_df <- BE_test_df |> 
  mutate(time = ds,
    BE_actual = y,
    arima = as.vector(arima$mean)) |> 
  select(-ds,-y)
head(arima_fcst_df,3)

```





### fable

Now, I go through the same process but using the functions from the `fable` package.

```{r}
#| message: false
#| warning: FALSE
auto_train <- BE_train_df |> select(-unique_id) |>
mutate(time = as.POSIXct(ds, format = "%Y-%m-%d %H:%M:%S")) |> select(-ds)
  
elec_ts_2 <- auto_train |> as_tsibble(index = time) |> fill_gaps(time, .full = start())
  
```



Here is the automatic ARIMA model fit using the `fable` package and the big surprise. `fable` fit an ARIMA(0,1,4)(0,0,2)[24] to the data which looks quite different from the ARIMA(2,1,1)(1,0,1)[24] model that the `forecast` package fit.
```{r}
fit <- elec_ts_2 %>%
  model(
    arima_fable = ARIMA(y)
  ) 
fable_ARIMA_fcst <- fit |> forecast(h = 24)
fit
```

## A Digression about Notation

So, why do I assert that the two model look to be quite different? Well, let's work out the short hand notation for the two models and see what the math looks like.

## ARIMA(2,1,1)(1,0,1)[24] from forecast package

This notation translates into: 
$$(1−\phi_1B−\phi_2B^2)(1−\Phi_1B^24)(1−B)y_t=(1−\theta_1B)(1−\Theta_1B^24)\varepsilon_t$$

which fully expands to:


$$ y_t−y_{t−1}−\phi_1y_{t−1}+\phi_1y_{t−2}−\phi_2y_{t−2}+\phi_2y_{t−3}−\Phi_1y_{t−24}+\Phi_1y_{t−25}+\phi_1\Phi_1y_{t−25}−\phi_1\Phi_1y_{t−26}+\phi_2\Phi_1y_{t−26}−\phi_2\Phi_1y_{t−27}=\varepsilon_t−\theta_1ε_{t−1}−\Theta_1\varepsilon_{t−24}+\theta_1\Theta_1\varepsilon_{t−25}$$

## ARIMA(0,1,4)(0,0,2)[24] from fable package

This notation translates into:

$$(1 - B)y_t = (1 - \theta_1B - \theta_2 B^2 - \theta_3 B^3 - \theta_4 B^4)(1 - \Theta_1 B^{24} - \Theta_2 B^{48})\varepsilon_t$$
which expands into:

$$y_t−y_{t−1}=\varepsilon_t−\theta_1\varepsilon_{t−1}−\theta_2\varepsilon_{t−2}−\theta_3\varepsilon_{t−3}−\theta_4\varepsilon_{t−4}−\Theta_1\varepsilon_{t−24}+\theta_1\Theta_1\varepsilon_{t−25}+\theta_2\Theta_1\varepsilon_{t−26}+\theta_3\Theta_1\varepsilon_{t−27}+\theta_4\Theta_1\varepsilon_{t−28}−\Theta_2\varepsilon_{t−48}+ \theta_1\Theta_2\varepsilon_{t−49} +\theta_2\Theta_2\varepsilon_{t−50}+\theta_3\Theta_2\varepsilon_{t−51}+\theta_4\Theta_2\varepsilon_{t−52}$$
These mathematical models don't look anything alike and I have no intuition why they should both be reasonable models for the data. But, let's see how the forecasts compare

Put the `fable` forecast upper case ARIMA into the data frame.

```{r}


#| code-fold: true
#| code-summary: "Show the code"

arima_fcst_df <- arima_fcst_df |> mutate(ARIMA =  as.vector(fable_ARIMA_fcst$.mean) )
head(arima_fcst_df,3)
```

Plot and compare.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| classes: preview-image
compare_fore <- function(file){
  arima_fcst_long_df <- file %>%
  pivot_longer(!time, names_to = "method", values_to = "mean")

q <- arima_fcst_long_df |>
  ggplot(aes(
    x = time,
    y = mean,
    group = method,
    color = method
  )) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  geom_line() +
  geom_point() +
  ggtitle("Multiple ARIMA Forecasts")

q
}

compare_fore(arima_fcst_df)
```

The two forecasts are almost on top of each other and running this code shows that the RMSE values from the actual data are also very close.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| warning: false
RMSE <-  function(m, o){sqrt(mean((m - o)^2))}
rms_names <- c("arima", "ARIMA")
rms_fcst <- array(NA_real_,
                          dim = 2,
                          dimnames = list(rms_names))
rms_fcst[1] <- RMSE(arima_fcst_df$arima, arima_fcst_df$BE_actual)
rms_fcst[2] <- RMSE(arima_fcst_df$ARIMA, arima_fcst_df$BE_actual)


rms_fcst
```

## An Investigation

First let's check that `fable` agrees with `forecast` with respect to the ARIMA(2,1,1)(1,0,1)[24] model. I use the `fable` package to fit the ARIMA(0,1,4)(0,0,2)[24] model discovered by the `forecast` package to the data.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
fit_2 <- elec_ts_2  %>%
as_tsibble() %>%
model(ARIMA_2 = ARIMA(y ~ 0 + pdq(2, 1, 1) + PDQ(1, 0, 1))) %>%
report()
```
 
Make the forecast and add it to the plotting data frame.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
fable_ARIMA_fcst_2 <- fit_2 |> forecast(h = 24)

arima_fcst_df <- arima_fcst_df |> mutate(ARIMA_2 =  as.vector(fable_ARIMA_fcst_2$.mean) )
head(arima_fcst_df,3)
```

Plotting the forecasts shows that the forecasts from , *arima* , the original ARIMA(2,1,1)(1,0,1)[24] model from the `forecast` package, *ARIMA*, the ARIMA(0,1,4)(0,0,2)[24] model from `fable` and *ARIMA_2*, the ARIMA(2,1,1)(1,0,1)[24] model from `fable` are all more or less on top of each other.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
compare_fore(arima_fcst_df)
```

The following plot shows that the residuals of the two ARIMA forecasts are very highly correlated.

```{r}
#| warning: FALSE
#| message: FALSE
#| code-fold: true
#| code-summary: "Show the code"
fit_2_aug<- fit_2 %>% augment()            # Get fitted values and residuals
fit_aug <- fit %>% augment() 
ARIMA <- fit_aug$.resid
ARIMA_2 <- fit_2_aug$.resid
r_df <- data_frame(ARIMA, ARIMA_2)
r_df |> ggplot(aes(ARIMA,ARIMA_2)) + geom_point(color = "darkblue") +
        ggtitle("residuals ARIMA(2,1,1)(1,0,1)[24] vs ARIMA(0,1,4)(0,0,2)[24]")
```


And, we see that the *arima* and *ARIMA_2* RMSE errors are very close.
```{r}
#| code-fold: true
#| code-summary: "Show the code"

RMSE <-  function(m, o){sqrt(mean((m - o)^2))}
rms_names <- c("arima", "ARIMA", "ARIMA_2")
rms_fcst <- array(NA_real_,
                          dim = 3,
                          dimnames = list(rms_names))
rms_fcst[1] <- RMSE(arima_fcst_df$arima, arima_fcst_df$BE_actual)
rms_fcst[2] <- RMSE(arima_fcst_df$ARIMA, arima_fcst_df$BE_actual)
rms_fcst[3] <- RMSE(arima_fcst_df$ARIMA_2, arima_fcst_df$BE_actual)

rms_fcst
```

## Is this Really Surprising?

Should I have been surprised by seeing two different auto fit models for the same time series that produce forecasts that are really close to each other? Anyone who has every tried to find a suitable ARIMA model by following the theory in the textbooks: looking at the ACF and PACF functions etc., knows how fragile the process is. Indeed, the experts will tell you that the *identifiability* of ARIMA models is a well-known problem. Consider this note on page 305 from [Brockwell and Davis (1987)](https://link.springer.com/book/10.1007/978-1-4899-0004-3):

*Of course in the modelling of real data there is rarely such a thing as the "true order". For the process $X_t =  \sum_{j=0}^{\infty} \psi_jZ_{t-j}$  there may be many polynomials $\theta(z)$, $\phi(z)$ such that the coefficients of $z^j$ in $\theta(z)/\phi(z)$ closely approximate $\psi_j$ for moderately small values of j. Correspondingly there may be many ARMA processes with properties similar to {X,}. This problem of identifiability becomes much more serious for multivariate processes.*



## Variations on a Theme

Because the two nearly identical solutions to the problem of finding a model that adequately fits the data are essentially linear equations, I imagine that they live somewhere close to each other in a multidimensinal vector space. Are there other solutions nearby? Are there better solutions? Given that I have two solutions, it seems reasonable to assume that minor perturbations of the p,d,q,P,D,Q parameters may turn up additional models with similiar RMSE profiles. As it turned out, most of the parameter fiddling that I tried resulted in numerical errors of one sort or another or inferior solutions. This is  not surprising. However, I did find a third solution that is at least as good as the others.


```{r}
#| code-fold: true
#| code-summary: "Show the code"
fit_aA <- elec_ts_2  %>%
as_tsibble() %>%
model(aA = ARIMA(y ~ 0 + pdq(0, 1, 3) + PDQ(0, 0, 2))) %>% 
report()
```

Once again, we see that all of the ARIMA forecasts sit on top of each other.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
fable_ARIMA_aA <- fit_aA |> forecast(h = 24)
arima_fcst_df <- arima_fcst_df |> mutate(ARIMA_aA =  as.vector(fable_ARIMA_aA$.mean) )
compare_fore(arima_fcst_df)
```


If you care about the third decimal place in the RMSE calculation, you might consider it to be the best solution so far.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

RMSE <-  function(m, o){sqrt(mean((m - o)^2))}
rms_names <- c("arima", "ARIMA", "ARIMA_2","ARIMA_aA")
rms_fcst <- array(NA_real_,
                          dim = 4,
                          dimnames = list(rms_names))
rms_fcst[1] <- RMSE(arima_fcst_df$arima, arima_fcst_df$BE_actual)
rms_fcst[2] <- RMSE(arima_fcst_df$ARIMA, arima_fcst_df$BE_actual)
rms_fcst[3] <- RMSE(arima_fcst_df$ARIMA_2, arima_fcst_df$BE_actual)
rms_fcst[4] <- RMSE(arima_fcst_df$ARIMA_aA, arima_fcst_df$BE_actual)
rms_fcst
```

## Summary

I have three different models for the BE Electricity Usage time series. Each provides a reasonably good fit based on comparing the RMSE of its respective forecasts with the actual data of the hold-out test data. Because of they way they were constructed it seems reasonable to assume that these solutions are somehow "close" to each other in the vector space containing the stochastic difference equations that constitute the models. A resonable question is: are there better models that live somewhere else in the vector space? Answering this means going back to fundamentals and searching for structure that may still be in the residuals. I will leave that for another time.





